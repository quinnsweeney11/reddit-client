{"version":3,"sources":["utils/picCarousel/PicCarousel.js","containers/postContainer/postContainerSlice.js","features/post/Post.js","containers/postContainer/PostContainer.js","features/filter/filterSlice.js","features/filter/Filter.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["PicCarousel","props","useState","currentPic","setCurrentPic","className","disabled","onClick","pics","length","src","media_id","alt","getLocalData","createAsyncThunk","a","fetch","response","json","output","getRedditData","url","postContainerSlice","createSlice","name","initialState","posts","isLoading","hasError","showPosts","reducers","toggleShowPosts","state","action","payload","extraReducers","pending","fulfilled","data","children","rejected","actions","htmlDecode","input","DOMParser","parseFromString","documentElement","textContent","Post","dispatch","useDispatch","newWarn","secure_media","reddit_video","score","num_comments","href","permalink","target","rel","subreddit","author","title","hls_url","autoplay","controls","oembed","dangerouslySetInnerHTML","__html","html","post_hint","gallery_data","items","selftext","domain","startsWith","selftext_html","PostContainer","useSelector","postContainer","currentFilter","filter","type","color","height","width","map","post","i","filterSlice","switchFilter","Filter","useEffect","window","scrollTo","class","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","value","status","increment","decrement","incrementByAmount","builder","addCase","store","configureStore","reducer","counter","counterReducer","postContainerReducer","filterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db232531.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './picCarousel.css';\r\n\r\n\r\nexport function PicCarousel(props) {\r\n    const [currentPic, setCurrentPic] = useState(0);\r\n    function nextPic(){\r\n        setCurrentPic(currentPic + 1);\r\n    }\r\n\r\n    function previousPic(){\r\n        setCurrentPic(currentPic - 1);\r\n    }\r\n\r\n    return(\r\n        <div className=\"PicCarousel\">\r\n            <div className=\"controls\">\r\n                {currentPic === 0 ? <button disabled>🚫</button>: <button onClick={() => previousPic()}>👈</button>}\r\n                {currentPic === props.pics.length - 1 ? <button disabled>🚫</button> : <button onClick={() => nextPic()}>👉</button>}\r\n            </div>\r\n            <img className=\"shown-img\" src={`https://i.redd.it/${props.pics[currentPic].media_id}.jpg`} alt=\"Carousel\" />\r\n        </div>\r\n    )\r\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    posts:[],\r\n    isLoading: false,\r\n    hasError: false,\r\n    showPosts: false,\r\n};\r\n\r\nexport const getLocalData = createAsyncThunk(\r\n    'postContainer/getLocalData',\r\n    async () => {\r\n        const response = await fetch('fakedata.json');\r\n        const output = await response.json()\r\n        return output;\r\n    }\r\n)\r\n\r\nexport const getRedditData = createAsyncThunk(\r\n    'postContainer/getRedditData',\r\n    async (url) => {\r\n        const response = await fetch(url);\r\n        const output = await response.json();\r\n        return output;\r\n    }\r\n)\r\n\r\nexport const postContainerSlice = createSlice({\r\n    name:'postContainer',\r\n    initialState,\r\n    reducers:{\r\n        toggleShowPosts: (state, action) => {\r\n            state.showPosts = action.payload\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [getLocalData.pending]: (state, action) => {\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [getLocalData.fulfilled]: (state, action) => {\r\n            state.posts = [...state.posts, ...action.payload.data.children];\r\n            state.isLoading = false;\r\n            state.hasError = false;\r\n        },\r\n        [getLocalData.rejected]: (state, action) => {\r\n            state.isLoading = false;\r\n            state.hasError = true;\r\n        },\r\n        [getRedditData.pending]: (state) => {\r\n            state.isLoading = true;\r\n            state.hasError = false;\r\n        },\r\n        [getRedditData.fulfilled]: (state, action) => {\r\n            state.posts = [...action.payload.data.children];\r\n            state.isLoading = false;\r\n            state.hasError = false;\r\n        },\r\n        [getRedditData.rejected]: (state) => {\r\n            state.isLoading = false;\r\n            state.hasError = true;\r\n        }\r\n    }\r\n});\r\n\r\nexport const selectPosts = (state) => state.postContainer.posts\r\n\r\nexport const selectLoading = (state) => {\r\n    return state.postContainer.loading;\r\n}\r\n\r\nexport const { toggleShowPosts } = postContainerSlice.actions;\r\n\r\nexport default postContainerSlice.reducer;","import React from \"react\";\r\nimport \"./post.css\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\r\nimport OpenInNewIcon from \"@material-ui/icons/OpenInNew\";\r\nimport { PicCarousel } from \"../../utils/picCarousel/PicCarousel\";\r\nimport ReactHlsPlayer from \"react-hls-player\";\r\nimport { toggleShowPosts } from \"../../containers/postContainer/postContainerSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n//Function that we use to format the text posts.\r\nfunction htmlDecode(input) {\r\n  var doc = new DOMParser().parseFromString(input, \"text/html\");\r\n\r\n  return doc.documentElement.textContent;\r\n}\r\n\r\nexport function Post(props) {\r\n  const dispatch = useDispatch();\r\n  if (props.newWarn === true) {\r\n    return (\r\n      <div className=\"post post_newWarn\">\r\n        <div className=\"contents\">\r\n          <h1 className=\"warning\">\r\n            WARNING: You are browsing using the 'new' filter. These posts are\r\n            very unmoderated, and can contain innapropriate content. Proceed at\r\n            your own risk.\r\n          </h1>\r\n          <button onClick={() => dispatch(toggleShowPosts(true))}>\r\n            I understand, let me in!\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (props.data.secure_media && props.data.secure_media.reddit_video) {\r\n    return (\r\n      <div className=\"post post_video\">\r\n        <div className=\"info\">\r\n          <div className=\"info-item points\">\r\n            <ArrowUpwardIcon />\r\n            <p>{props.data.score}</p>\r\n          </div>\r\n          <br />\r\n          <div className=\"info-item children\">\r\n            <ChatBubbleIcon />\r\n            <p>{props.data.num_comments}</p>\r\n          </div>\r\n          <div className=\"info-item open\">\r\n            <a\r\n              href={`https://www.reddit.com${props.data.permalink}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <OpenInNewIcon />\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"contents\">\r\n          <div className=\"info-item metadata\">\r\n            <p>\r\n              <span className=\"rslash\">r/</span>\r\n              {props.data.subreddit}\r\n            </p>\r\n            <p>\r\n              <span className=\"uslash\">u/</span>\r\n              {props.data.author}\r\n            </p>\r\n          </div>\r\n          <h2 className=\"title-text\">{props.data.title}</h2>\r\n          <ReactHlsPlayer\r\n            src={props.data.secure_media.reddit_video.hls_url}\r\n            autoplay={false}\r\n            controls={true}\r\n            className=\"video-container\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (props.data.secure_media && props.data.secure_media.oembed) {\r\n    return (\r\n      <div className=\"post post_gif\">\r\n        <div className=\"info\">\r\n          <div className=\"info-item points\">\r\n            <ArrowUpwardIcon />\r\n            <p>{props.data.score}</p>\r\n          </div>\r\n          <br />\r\n          <div className=\"info-item children\">\r\n            <ChatBubbleIcon />\r\n            <p>{props.data.num_comments}</p>\r\n          </div>\r\n          <div className=\"info-item open\">\r\n            <a\r\n              href={`https://www.reddit.com${props.data.permalink}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <OpenInNewIcon />\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"contents\">\r\n          <div className=\"info-item metadata\">\r\n            <p>\r\n              <span className=\"rslash\">r/</span>\r\n              {props.data.subreddit}\r\n            </p>\r\n            <p>\r\n              <span className=\"uslash\">u/</span>\r\n              {props.data.author}\r\n            </p>\r\n          </div>\r\n          <h2>{props.data.title}</h2>\r\n          <div\r\n            className=\"embedded_media\"\r\n            dangerouslySetInnerHTML={{\r\n              __html: htmlDecode(props.data.secure_media.oembed.html),\r\n            }}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (props.data.post_hint === \"image\") {\r\n    return (\r\n      <div className=\"post post_image\">\r\n        <div className=\"info\">\r\n          <div className=\"info-item points\">\r\n            <ArrowUpwardIcon />\r\n            <p>{props.data.score}</p>\r\n          </div>\r\n          <br />\r\n          <div className=\"info-item children\">\r\n            <ChatBubbleIcon />\r\n            <p>{props.data.num_comments}</p>\r\n          </div>\r\n          <div className=\"info-item open\">\r\n            <a\r\n              href={`https://www.reddit.com${props.data.permalink}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <OpenInNewIcon />\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"contents\">\r\n          <div className=\"info-item metadata\">\r\n            <p>\r\n              <span className=\"rslash\">r/</span>\r\n              {props.data.subreddit}\r\n            </p>\r\n            <p>\r\n              <span className=\"uslash\">u/</span>\r\n              {props.data.author}\r\n            </p>\r\n          </div>\r\n          <h2>{props.data.title}</h2>\r\n          <img className=\"image\" alt=\"Post Content\" src={props.data.url} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (props.data.gallery_data) {\r\n    return (\r\n      <div className=\"post post_carousel\">\r\n        <div className=\"info\">\r\n          <div className=\"info-item points\">\r\n            <ArrowUpwardIcon />\r\n            <p>{props.data.score}</p>\r\n          </div>\r\n          <br />\r\n          <div className=\"info-item children\">\r\n            <ChatBubbleIcon />\r\n            <p>{props.data.num_comments}</p>\r\n          </div>\r\n          <div className=\"info-item open\">\r\n            <a\r\n              href={`https://www.reddit.com${props.data.permalink}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <OpenInNewIcon />\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div className=\"contents\">\r\n          <div className=\"info-item metadata\">\r\n            <p>\r\n              <span className=\"rslash\">r/</span>\r\n              {props.data.subreddit}\r\n            </p>\r\n            <p>\r\n              <span className=\"uslash\">u/</span>\r\n              {props.data.author}\r\n            </p>\r\n          </div>\r\n          <h2>{props.data.title}</h2>\r\n          <PicCarousel\r\n            className=\"carousel\"\r\n            pics={props.data.gallery_data.items}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (props.data.selftext === \"\") {\r\n    if (props.data.domain.startsWith(\"self.\")) {\r\n      return (\r\n        <div className=\"post\">\r\n          <div className=\"info\">\r\n            <div className=\"info-item points\">\r\n              <ArrowUpwardIcon />\r\n              <p>{props.data.score}</p>\r\n            </div>\r\n            <br />\r\n            <div className=\"info-item children\">\r\n              <ChatBubbleIcon />\r\n              <p>{props.data.num_comments}</p>\r\n            </div>\r\n            <div className=\"info-item open\">\r\n              <a\r\n                href={`https://www.reddit.com${props.data.permalink}`}\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n              >\r\n                <OpenInNewIcon />\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className=\"contents\">\r\n            <div className=\"info-item metadata\">\r\n              <p>\r\n                <span className=\"rslash\">r/</span>\r\n                {props.data.subreddit}\r\n              </p>\r\n              <p>\r\n                <span className=\"uslash\">u/</span>\r\n                {props.data.author}\r\n              </p>\r\n            </div>\r\n            <h2>{props.data.title}</h2>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"post\">\r\n          <div className=\"info\">\r\n            <div className=\"info-item points\">\r\n              <ArrowUpwardIcon />\r\n              <p>{props.data.score}</p>\r\n            </div>\r\n            <br />\r\n            <div className=\"info-item children\">\r\n              <ChatBubbleIcon />\r\n              <p>{props.data.num_comments}</p>\r\n            </div>\r\n            <div className=\"info-item open\">\r\n              <a\r\n                href={`https://www.reddit.com${props.data.permalink}`}\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n              >\r\n                <OpenInNewIcon />\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className=\"contents\">\r\n            <div className=\"info-item metadata\">\r\n              <p>\r\n                <span className=\"rslash\">r/</span>\r\n                {props.data.subreddit}\r\n              </p>\r\n              <p>\r\n                <span className=\"uslash\">u/</span>\r\n                {props.data.author}\r\n              </p>\r\n            </div>\r\n            <h2>{props.data.title}</h2>\r\n            <h4>\r\n              <a href={props.data.url} target=\"_blank\" rel=\"noreferrer\">\r\n                {props.data.url}\r\n              </a>\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"info\">\r\n        <div className=\"info-item points\">\r\n          <ArrowUpwardIcon />\r\n          <p>{props.data.score}</p>\r\n        </div>\r\n        <br />\r\n        <div className=\"info-item children\">\r\n          <ChatBubbleIcon />\r\n          <p>{props.data.num_comments}</p>\r\n        </div>\r\n        <div className=\"info-item open\">\r\n          <a\r\n            href={`https://www.reddit.com${props.data.permalink}`}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <OpenInNewIcon />\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <div className=\"contents\">\r\n        <div className=\"info-item metadata\">\r\n          <p>\r\n            <span className=\"rslash\">r/</span>\r\n            {props.data.subreddit}\r\n          </p>\r\n          <p>\r\n            <span className=\"uslash\">u/</span>\r\n            {props.data.author}\r\n          </p>\r\n        </div>\r\n        <h4>{props.data.title}</h4>\r\n        <div\r\n          className=\"selftext\"\r\n          dangerouslySetInnerHTML={{\r\n            __html: htmlDecode(props.data.selftext_html),\r\n          }}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Post } from '../../features/post/Post';\r\nimport './postContainer.css'\r\n\r\nimport ReactLoading from 'react-loading';\r\n\r\nexport function PostContainer (props) {\r\n    // const dispatch = useDispatch();\r\n    const { isLoading, hasError, posts, showPosts } = useSelector((state) => state.postContainer)\r\n    const currentFilter = useSelector((state) => state.filter);\r\n\r\n    if(isLoading){\r\n        return(\r\n            <div className=\"nonpost-container\">\r\n                <ReactLoading className=\"loader\" type='bars' color='#519fcf' height={'15%'} width={'10%'} />\r\n            </div>\r\n        )\r\n    } else if(hasError){\r\n        return(\r\n            <div className=\"nonpost-container\">\r\n                <h1>Error loading posts, please try again later :(</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if(currentFilter.currentFilter === 'new' && !showPosts){\r\n        return (\r\n            <div className=\"nonpost-container\">\r\n                <Post newWarn={true} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"PostContainer\">\r\n            {posts.map((post, i) => {\r\n                return <Post key={i} data={posts[i].data}/>\r\n            })}\r\n        </div>\r\n    )\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    currentFilter: 'hot'\r\n}\r\n\r\nexport const filterSlice = createSlice({\r\n    name:'filter',\r\n    initialState,\r\n    reducers:{\r\n        switchFilter: (state, action) => {\r\n            state.currentFilter = action.payload.filter;\r\n        } \r\n    }\r\n})\r\n\r\nexport const selectFilter = (state) => state.filter.currentFilter;\r\n\r\nexport const { switchFilter } = filterSlice.actions;\r\n\r\nexport default filterSlice.reducer;","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"./filter.css\";\r\nimport { switchFilter } from \"./filterSlice\";\r\nimport {\r\n  getRedditData,\r\n  toggleShowPosts,\r\n} from \"../../containers/postContainer/postContainerSlice\";\r\n\r\nexport function Filter(props) {\r\n  const dispatch = useDispatch();\r\n  const { currentFilter } = useSelector((state) => state.filter);\r\n  useEffect(() => {\r\n    const url = `https://www.reddit.com/${currentFilter}.json`;\r\n    dispatch(getRedditData(url));\r\n    window.scrollTo(0, 0);\r\n  });\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"buttons\">\r\n        <button\r\n          className={currentFilter === \"hot\" ? \"active\" : \"inactive\"}\r\n          onClick={() => dispatch(switchFilter({ filter: \"hot\" }))}\r\n        >\r\n          Hot\r\n        </button>\r\n        <button\r\n          className={currentFilter === \"new\" ? \"active\" : \"inactive\"}\r\n          onClick={() => dispatch(switchFilter({ filter: \"new\" }))}\r\n        >\r\n          New\r\n        </button>\r\n        <button\r\n          className={currentFilter === \"best\" ? \"active\" : \"inactive\"}\r\n          onClick={() => dispatch(switchFilter({ filter: \"best\" }))}\r\n        >\r\n          Best\r\n        </button>\r\n      </div>\r\n      <div className=\"text\">\r\n        <h3>\r\n          This project is still a work in progress, here are some of the things\r\n          to be added in the future:\r\n        </h3>\r\n        <ul>\r\n          <li>\r\n            Loading more posts when a user's scroll reaches the bottom of the\r\n            page\r\n          </li>\r\n          <li>Search bar to filter by subreddit</li>\r\n          <li>Interface to browse comments on posts</li>\r\n          <li>Improved mobile experience</li>\r\n        </ul>\r\n        <p class=\"myNote\">Made with ❤️ by Quinn Sweeney</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { PostContainer } from './containers/postContainer/PostContainer';\r\nimport { Filter } from './features/filter/Filter';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <PostContainer />\r\n      <Filter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport postContainerReducer from '../containers/postContainer/postContainerSlice';\r\nimport filterReducer from '../features/filter/filterSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    postContainer: postContainerReducer,\r\n    filter: filterReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}