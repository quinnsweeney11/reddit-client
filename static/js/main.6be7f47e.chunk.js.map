{"version":3,"sources":["utils/picCarousel/PicCarousel.js","containers/postContainer/postContainerSlice.js","features/post/Post.js","features/search/searchSlice.js","features/search/Search.js","containers/postContainer/PostContainer.js","features/filter/filterSlice.js","features/filter/Filter.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["PicCarousel","props","useState","currentPic","setCurrentPic","className","disabled","onClick","pics","length","src","media_id","alt","getLocalData","createAsyncThunk","a","fetch","response","json","output","getRedditData","url","postContainerSlice","createSlice","name","initialState","posts","isLoading","hasError","showPosts","reducers","toggleShowPosts","state","action","payload","extraReducers","pending","fulfilled","data","children","rejected","actions","htmlDecode","input","DOMParser","parseFromString","documentElement","textContent","Post","dispatch","useDispatch","newWarn","secure_media","reddit_video","score","num_comments","href","permalink","target","rel","subreddit","author","title","hls_url","autoplay","controls","oembed","dangerouslySetInnerHTML","__html","html","post_hint","gallery_data","items","selftext","domain","startsWith","selftext_html","searchSlice","currentSub","setCurrentSub","Search","setState","handleSubmit","e","preventDefault","alert","onSubmit","class","type","placeholder","value","onChange","substring","handleChange","PostContainer","useSelector","postContainer","currentFilter","filter","color","height","width","map","post","i","filterSlice","switchFilter","Filter","search","useEffect","window","scrollTo","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","status","increment","decrement","incrementByAmount","builder","addCase","store","configureStore","reducer","counter","counterReducer","postContainerReducer","filterReducer","searchReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6be7f47e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './picCarousel.css';\n\n\nexport function PicCarousel(props) {\n    const [currentPic, setCurrentPic] = useState(0);\n    function nextPic(){\n        setCurrentPic(currentPic + 1);\n    }\n\n    function previousPic(){\n        setCurrentPic(currentPic - 1);\n    }\n\n    return(\n        <div className=\"PicCarousel\">\n            <div className=\"controls\">\n                {currentPic === 0 ? <button disabled>🚫</button>: <button onClick={() => previousPic()}>👈</button>}\n                {currentPic === props.pics.length - 1 ? <button disabled>🚫</button> : <button onClick={() => nextPic()}>👉</button>}\n            </div>\n            <img className=\"shown-img\" src={`https://i.redd.it/${props.pics[currentPic].media_id}.jpg`} alt=\"Carousel\" />\n        </div>\n    )\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    posts:[],\n    isLoading: false,\n    hasError: false,\n    showPosts: false,\n};\n\nexport const getLocalData = createAsyncThunk(\n    'postContainer/getLocalData',\n    async () => {\n        const response = await fetch('fakedata.json');\n        const output = await response.json()\n        return output;\n    }\n)\n\nexport const getRedditData = createAsyncThunk(\n    'postContainer/getRedditData',\n    async (url) => {\n        const response = await fetch(url);\n        const output = await response.json();\n        return output;\n    }\n)\n\nexport const postContainerSlice = createSlice({\n    name:'postContainer',\n    initialState,\n    reducers:{\n        toggleShowPosts: (state, action) => {\n            state.showPosts = action.payload\n        }\n    },\n    extraReducers: {\n        [getLocalData.pending]: (state, action) => {\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [getLocalData.fulfilled]: (state, action) => {\n            state.posts = [...state.posts, ...action.payload.data.children];\n            state.isLoading = false;\n            state.hasError = false;\n        },\n        [getLocalData.rejected]: (state, action) => {\n            state.isLoading = false;\n            state.hasError = true;\n        },\n        [getRedditData.pending]: (state) => {\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [getRedditData.fulfilled]: (state, action) => {\n            state.posts = [...action.payload.data.children];\n            state.isLoading = false;\n            state.hasError = false;\n        },\n        [getRedditData.rejected]: (state) => {\n            state.isLoading = false;\n            state.hasError = true;\n        }\n    }\n});\n\nexport const selectPosts = (state) => state.postContainer.posts\n\nexport const selectLoading = (state) => {\n    return state.postContainer.loading;\n}\n\nexport const { toggleShowPosts } = postContainerSlice.actions;\n\nexport default postContainerSlice.reducer;","import React from \"react\";\nimport \"./post.css\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport OpenInNewIcon from \"@material-ui/icons/OpenInNew\";\nimport { PicCarousel } from \"../../utils/picCarousel/PicCarousel\";\nimport ReactHlsPlayer from \"react-hls-player\";\nimport { toggleShowPosts } from \"../../containers/postContainer/postContainerSlice\";\nimport { useDispatch } from \"react-redux\";\n\n//Function that we use to format the text posts.\nfunction htmlDecode(input) {\n  var doc = new DOMParser().parseFromString(input, \"text/html\");\n\n  return doc.documentElement.textContent;\n}\n\nexport function Post(props) {\n  const dispatch = useDispatch();\n  if (props.newWarn === true) {\n    return (\n      <div className=\"post post_newWarn\">\n        <div className=\"contents\">\n          <h1 className=\"warning\">\n            WARNING: You are browsing using the 'new' filter. These posts are\n            very unmoderated, and can contain innapropriate content. Proceed at\n            your own risk.\n          </h1>\n          <button onClick={() => dispatch(toggleShowPosts(true))}>\n            I understand, let me in!\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (props.data.secure_media && props.data.secure_media.reddit_video) {\n    return (\n      <div className=\"post post_video\">\n        <div className=\"info\">\n          <div className=\"info-item points\">\n            <ArrowUpwardIcon />\n            <p>{props.data.score}</p>\n          </div>\n          <br />\n          <div className=\"info-item children\">\n            <ChatBubbleIcon />\n            <p>{props.data.num_comments}</p>\n          </div>\n          <div className=\"info-item open\">\n            <a\n              href={`https://www.reddit.com${props.data.permalink}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <OpenInNewIcon />\n            </a>\n          </div>\n        </div>\n        <div className=\"contents\">\n          <div className=\"info-item metadata\">\n            <p>\n              <span className=\"rslash\">r/</span>\n              {props.data.subreddit}\n            </p>\n            <p>\n              <span className=\"uslash\">u/</span>\n              {props.data.author}\n            </p>\n          </div>\n          <h2 className=\"title-text\">{props.data.title}</h2>\n          <ReactHlsPlayer\n            src={props.data.secure_media.reddit_video.hls_url}\n            autoplay={false}\n            controls={true}\n            className=\"video-container\"\n          />\n        </div>\n      </div>\n    );\n  } else if (props.data.secure_media && props.data.secure_media.oembed) {\n    return (\n      <div className=\"post post_gif\">\n        <div className=\"info\">\n          <div className=\"info-item points\">\n            <ArrowUpwardIcon />\n            <p>{props.data.score}</p>\n          </div>\n          <br />\n          <div className=\"info-item children\">\n            <ChatBubbleIcon />\n            <p>{props.data.num_comments}</p>\n          </div>\n          <div className=\"info-item open\">\n            <a\n              href={`https://www.reddit.com${props.data.permalink}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <OpenInNewIcon />\n            </a>\n          </div>\n        </div>\n        <div className=\"contents\">\n          <div className=\"info-item metadata\">\n            <p>\n              <span className=\"rslash\">r/</span>\n              {props.data.subreddit}\n            </p>\n            <p>\n              <span className=\"uslash\">u/</span>\n              {props.data.author}\n            </p>\n          </div>\n          <h2>{props.data.title}</h2>\n          <div\n            className=\"embedded_media\"\n            dangerouslySetInnerHTML={{\n              __html: htmlDecode(props.data.secure_media.oembed.html),\n            }}\n          ></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (props.data.post_hint === \"image\") {\n    return (\n      <div className=\"post post_image\">\n        <div className=\"info\">\n          <div className=\"info-item points\">\n            <ArrowUpwardIcon />\n            <p>{props.data.score}</p>\n          </div>\n          <br />\n          <div className=\"info-item children\">\n            <ChatBubbleIcon />\n            <p>{props.data.num_comments}</p>\n          </div>\n          <div className=\"info-item open\">\n            <a\n              href={`https://www.reddit.com${props.data.permalink}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <OpenInNewIcon />\n            </a>\n          </div>\n        </div>\n        <div className=\"contents\">\n          <div className=\"info-item metadata\">\n            <p>\n              <span className=\"rslash\">r/</span>\n              {props.data.subreddit}\n            </p>\n            <p>\n              <span className=\"uslash\">u/</span>\n              {props.data.author}\n            </p>\n          </div>\n          <h2>{props.data.title}</h2>\n          <img className=\"image\" alt=\"Post Content\" src={props.data.url} />\n        </div>\n      </div>\n    );\n  }\n\n  if (props.data.gallery_data) {\n    return (\n      <div className=\"post post_carousel\">\n        <div className=\"info\">\n          <div className=\"info-item points\">\n            <ArrowUpwardIcon />\n            <p>{props.data.score}</p>\n          </div>\n          <br />\n          <div className=\"info-item children\">\n            <ChatBubbleIcon />\n            <p>{props.data.num_comments}</p>\n          </div>\n          <div className=\"info-item open\">\n            <a\n              href={`https://www.reddit.com${props.data.permalink}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <OpenInNewIcon />\n            </a>\n          </div>\n        </div>\n        <div className=\"contents\">\n          <div className=\"info-item metadata\">\n            <p>\n              <span className=\"rslash\">r/</span>\n              {props.data.subreddit}\n            </p>\n            <p>\n              <span className=\"uslash\">u/</span>\n              {props.data.author}\n            </p>\n          </div>\n          <h2>{props.data.title}</h2>\n          <PicCarousel\n            className=\"carousel\"\n            pics={props.data.gallery_data.items}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  if (props.data.selftext === \"\") {\n    if (props.data.domain.startsWith(\"self.\")) {\n      return (\n        <div className=\"post\">\n          <div className=\"info\">\n            <div className=\"info-item points\">\n              <ArrowUpwardIcon />\n              <p>{props.data.score}</p>\n            </div>\n            <br />\n            <div className=\"info-item children\">\n              <ChatBubbleIcon />\n              <p>{props.data.num_comments}</p>\n            </div>\n            <div className=\"info-item open\">\n              <a\n                href={`https://www.reddit.com${props.data.permalink}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <OpenInNewIcon />\n              </a>\n            </div>\n          </div>\n          <div className=\"contents\">\n            <div className=\"info-item metadata\">\n              <p>\n                <span className=\"rslash\">r/</span>\n                {props.data.subreddit}\n              </p>\n              <p>\n                <span className=\"uslash\">u/</span>\n                {props.data.author}\n              </p>\n            </div>\n            <h2>{props.data.title}</h2>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"post\">\n          <div className=\"info\">\n            <div className=\"info-item points\">\n              <ArrowUpwardIcon />\n              <p>{props.data.score}</p>\n            </div>\n            <br />\n            <div className=\"info-item children\">\n              <ChatBubbleIcon />\n              <p>{props.data.num_comments}</p>\n            </div>\n            <div className=\"info-item open\">\n              <a\n                href={`https://www.reddit.com${props.data.permalink}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <OpenInNewIcon />\n              </a>\n            </div>\n          </div>\n          <div className=\"contents\">\n            <div className=\"info-item metadata\">\n              <p>\n                <span className=\"rslash\">r/</span>\n                {props.data.subreddit}\n              </p>\n              <p>\n                <span className=\"uslash\">u/</span>\n                {props.data.author}\n              </p>\n            </div>\n            <h2>{props.data.title}</h2>\n            <h4>\n              <a href={props.data.url} target=\"_blank\" rel=\"noreferrer\">\n                Visit linked website\n              </a>\n            </h4>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"post\">\n      <div className=\"info\">\n        <div className=\"info-item points\">\n          <ArrowUpwardIcon />\n          <p>{props.data.score}</p>\n        </div>\n        <br />\n        <div className=\"info-item children\">\n          <ChatBubbleIcon />\n          <p>{props.data.num_comments}</p>\n        </div>\n        <div className=\"info-item open\">\n          <a\n            href={`https://www.reddit.com${props.data.permalink}`}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <OpenInNewIcon />\n          </a>\n        </div>\n      </div>\n      <div className=\"contents\">\n        <div className=\"info-item metadata\">\n          <p>\n            <span className=\"rslash\">r/</span>\n            {props.data.subreddit}\n          </p>\n          <p>\n            <span className=\"uslash\">u/</span>\n            {props.data.author}\n          </p>\n        </div>\n        <h4>{props.data.title}</h4>\n        <div\n          className=\"selftext\"\n          dangerouslySetInnerHTML={{\n            __html: htmlDecode(props.data.selftext_html),\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\n//Define the inital state of Search:\nconst initialState = {\n  currentSub: \"popular\",\n};\n\nexport const searchSlice = createSlice({\n  name: \"search\",\n  initialState,\n  reducers: {\n    setCurrentSub: (state, action) => {\n      state.currentSub = action.payload;\n    },\n  },\n});\n\nexport const { setCurrentSub } = searchSlice.actions;\n\nexport default searchSlice.reducer;\n","import { setCurrentSub } from \"./searchSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport \"./search.css\";\n\nexport function Search(props) {\n  const [state, setState] = useState(\"\");\n  const dispatch = useDispatch();\n  const handleChange = (e) => {\n    if (e.target.value[e.target.value.length - 1] !== \" \") {\n      setState(e.target.value.substring(2));\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (state.length !== 0) {\n      dispatch(setCurrentSub(state));\n    } else {\n      alert(`Please enter a value before searching.`);\n    }\n  };\n\n  return (\n    <div className=\"search\">\n      <form onSubmit={(e) => handleSubmit(e)} class=\"search-form\">\n        <input\n          type=\"text\"\n          class=\"search-text\"\n          placeholder=\"subreddit\"\n          value={`r/${state}`}\n          onChange={(e) => handleChange(e)}\n        />\n        <input\n          type=\"button\"\n          class=\"search-button\"\n          value=\"Search\"\n          onClick={(e) => handleSubmit(e)}\n        />\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { Post } from \"../../features/post/Post\";\nimport \"./postContainer.css\";\n\nimport ReactLoading from \"react-loading\";\nimport { Search } from \"../../features/search/Search\";\n\nexport function PostContainer(props) {\n  // const dispatch = useDispatch();\n  const { isLoading, hasError, posts, showPosts } = useSelector(\n    (state) => state.postContainer\n  );\n  const currentFilter = useSelector((state) => state.filter);\n\n  if (isLoading) {\n    return (\n      <div className=\"nonpost-container\">\n        <ReactLoading\n          className=\"loader\"\n          type=\"bars\"\n          color=\"#519fcf\"\n          height={\"15%\"}\n          width={\"10%\"}\n        />\n      </div>\n    );\n  } else if (hasError) {\n    return (\n      <div className=\"nonpost-container\">\n        <h1>Error loading posts, please try again later :(</h1>\n      </div>\n    );\n  }\n\n  if (currentFilter.currentFilter === \"new\" && !showPosts) {\n    return (\n      <div className=\"nonpost-container\">\n        <Post newWarn={true} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"PostContainer\">\n      <Search />\n      {posts.map((post, i) => {\n        return <Post key={i} data={posts[i].data} />;\n      })}\n    </div>\n  );\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    currentFilter: 'hot'\n}\n\nexport const filterSlice = createSlice({\n    name:'filter',\n    initialState,\n    reducers:{\n        switchFilter: (state, action) => {\n            state.currentFilter = action.payload.filter;\n        } \n    }\n})\n\nexport const selectFilter = (state) => state.filter.currentFilter;\n\nexport const { switchFilter } = filterSlice.actions;\n\nexport default filterSlice.reducer;","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./filter.css\";\nimport { switchFilter } from \"./filterSlice\";\nimport { getRedditData } from \"../../containers/postContainer/postContainerSlice\";\n\nexport function Filter(props) {\n  const dispatch = useDispatch();\n  const { currentFilter } = useSelector((state) => state.filter);\n  const { currentSub } = useSelector((state) => state.search);\n  useEffect(() => {\n    const url = `https://www.reddit.com/r/${currentSub}/${currentFilter}.json`;\n    dispatch(getRedditData(url));\n    window.scrollTo(0, 0);\n  });\n  return (\n    <div className=\"filter\">\n      <div className=\"buttons\">\n        <button\n          className={currentFilter === \"hot\" ? \"active\" : \"inactive\"}\n          onClick={() => dispatch(switchFilter({ filter: \"hot\" }))}\n        >\n          Hot\n        </button>\n        <button\n          className={currentFilter === \"new\" ? \"active\" : \"inactive\"}\n          onClick={() => dispatch(switchFilter({ filter: \"new\" }))}\n        >\n          New\n        </button>\n        <button\n          className={currentFilter === \"best\" ? \"active\" : \"inactive\"}\n          onClick={() => dispatch(switchFilter({ filter: \"best\" }))}\n        >\n          Best\n        </button>\n      </div>\n      <div className=\"text\">\n        <h3>\n          This project is still a work in progress, here are some of the things\n          to be added in the future:\n        </h3>\n        <ul>\n          <li>\n            Loading more posts when a user's scroll reaches the bottom of the\n            page\n          </li>\n          <li>Search bar to filter by subreddit</li>\n          <li>Interface to browse comments on posts</li>\n          <li>Improved mobile experience</li>\n        </ul>\n        <p class=\"myNote\">Made with ❤️ by Quinn Sweeney</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { PostContainer } from \"./containers/postContainer/PostContainer\";\nimport { Filter } from \"./features/filter/Filter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PostContainer />\n      <Filter />\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../features/counter/counterSlice\";\nimport postContainerReducer from \"../containers/postContainer/postContainerSlice\";\nimport filterReducer from \"../features/filter/filterSlice\";\nimport searchReducer from \"../features/search/searchSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    postContainer: postContainerReducer,\n    filter: filterReducer,\n    search: searchReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}