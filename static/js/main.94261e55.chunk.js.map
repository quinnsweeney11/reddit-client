{"version":3,"sources":["utils/picCarousel/PicCarousel.js","features/post/postSlice.js","features/post/Post.js","containers/postContainer/PostContainer.js","containers/postContainer/postContainerSlice.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["PicCarousel","props","useState","currentPic","setCurrentPic","className","disabled","onClick","pics","length","src","media_id","alt","postSlice","createSlice","name","initialState","title","text","gallery","timestamp","points","children","reducers","setGallery","state","action","console","log","payload","actions","Post","input","useDispatch","data","secure_media","reddit_video","fallback_url","score","num_comments","hls_url","autoplay","controls","class","post_hint","url","gallery_data","items","selftext","dangerouslySetInnerHTML","__html","selftext_html","DOMParser","parseFromString","documentElement","textContent","PostContainer","useSelector","postContainer","isLoading","hasError","posts","map","post","i","getLocalData","createAsyncThunk","a","fetch","response","json","output","postContainerSlice","extraReducers","pending","fulfilled","rejected","App","dispatch","useEffect","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","value","status","increment","decrement","incrementByAmount","builder","addCase","store","configureStore","reducer","counter","counterReducer","postContainerReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VASO,SAASA,EAAYC,GAAQ,IAAD,EACKC,mBAAS,GADd,mBACxBC,EADwB,KACZC,EADY,KAU/B,OACI,sBAAKC,UAAU,cAAf,UACI,sBAAKA,UAAU,WAAf,UACoB,IAAfF,EAAmB,wBAAQG,UAAQ,EAAhB,0BAA8B,wBAAQC,QAAS,WAN3EH,EAAcD,EAAa,IAM+B,0BACjDA,IAAeF,EAAMO,KAAKC,OAAS,EAAI,wBAAQH,UAAQ,EAAhB,0BAA+B,wBAAQC,QAAS,WAXhGH,EAAcD,EAAa,IAWoD,6BAE3E,qBAAKE,UAAU,YAAYK,IAAG,4BAAuBT,EAAMO,KAAKL,GAAYQ,SAA9C,QAA8DC,IAAI,gB,yBCb/FC,EAAYC,YAAY,CACjCC,KAAK,OACLC,aAXiB,CACjBC,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,UAAW,GACXC,OAAQ,GACRC,SAAU,IAMVC,SAAU,CACNC,WAAY,SAACC,EAAOC,GAChBC,QAAQC,IAAIF,EAAOG,SACnBJ,EAAMN,QAAU,CAACO,EAAOG,aAKNhB,EAAUiB,QAAzBN,WAEAX,EAAf,QCPO,SAASkB,EAAK9B,GACjB,IAPgB+B,EAOCC,cAEjB,OAAIhC,EAAMiC,KAAKC,cACXR,QAAQC,IAAI3B,EAAMiC,KAAKC,aAAaC,aAAaC,cAE7C,sBAAKhC,UAAU,kBAAf,UACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKI,WAEnB,uBACA,sBAAKjC,UAAU,qBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKK,qBAGvB,sBAAKlC,UAAU,WAAf,UACI,6BAAKJ,EAAMiC,KAAKjB,QAChB,cAAC,IAAD,CAAgBP,IAAKT,EAAMiC,KAAKC,aAAaC,aAAaI,QAASC,UAAU,EAAOC,UAAU,EAAMC,MAAM,2BAM7F,UAAzB1C,EAAMiC,KAAKU,UAEP,sBAAKvC,UAAU,kBAAf,UACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKI,WAEnB,uBACA,sBAAKjC,UAAU,qBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKK,qBAGvB,sBAAKlC,UAAU,WAAf,UACI,6BAAKJ,EAAMiC,KAAKjB,QAChB,qBACIZ,UAAU,QACVO,IAAI,eACJF,IAAKT,EAAMiC,KAAKW,YAOhC5C,EAAMiC,KAAKY,aAEP,sBAAKzC,UAAU,qBAAf,UACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKI,WAEnB,uBACA,sBAAKjC,UAAU,qBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKK,qBAGvB,sBAAKlC,UAAU,WAAf,UACI,6BAAKJ,EAAMiC,KAAKjB,QAChB,cAACjB,EAAD,CACIK,UAAU,WACVG,KAAMP,EAAMiC,KAAKY,aAAaC,cAOtB,KAAxB9C,EAAMiC,KAAKc,SAEP,sBAAK3C,UAAU,OAAf,UACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKI,WAEnB,uBACA,sBAAKjC,UAAU,qBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKK,qBAGvB,qBAAKlC,UAAU,WAAf,SACI,6BAAKJ,EAAMiC,KAAKjB,aAO5B,sBAAKZ,UAAU,OAAf,UACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,mBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKI,WAEnB,uBACA,sBAAKjC,UAAU,qBAAf,UACI,cAAC,IAAD,IACA,4BAAIJ,EAAMiC,KAAKK,qBAGvB,sBAAKlC,UAAU,WAAf,UACI,6BAAKJ,EAAMiC,KAAKjB,QAChB,qBACIZ,UAAU,WACV4C,wBAAyB,CACrBC,QA1HJlB,EA0HuB/B,EAAMiC,KAAKiB,eAzHxC,IAAIC,WAAYC,gBAAgBrB,EAAO,aAEtCsB,gBAAgBC,sB,MCTxB,SAASC,EAAevD,GAAO,MAEKwD,aAAY,SAAChC,GAAD,OAAWA,EAAMiC,iBAA5DC,EAF0B,EAE1BA,UAAWC,EAFe,EAEfA,SAAUC,EAFK,EAELA,MAE7B,OAAGF,EAEK,4CAEEC,EAEF,gFAKJ,qBAAKvD,UAAU,gBAAf,SACKwD,EAAMC,KAAI,SAACC,EAAMC,GACd,OAAO,cAACjC,EAAD,CAAcG,KAAM2B,EAAMG,GAAG9B,MAAlB8B,Q,+CCfrBC,EAAeC,YACxB,6BADwC,sBAExC,8BAAAC,EAAA,sEAC2BC,MAAM,iBADjC,cACUC,EADV,gBAEyBA,EAASC,OAFlC,cAEUC,EAFV,yBAGWA,GAHX,4CAoCWC,EA7BmB1D,YAAY,CAC1CC,KAAK,gBACLC,aAjBiB,CACjB6C,MAAM,GACNF,WAAW,EACXC,UAAU,GAeVrC,SAAS,GAGTkD,eAAa,mBACRR,EAAaS,SAAU,SAACjD,EAAOC,GAC5BD,EAAMkC,WAAY,EAClBlC,EAAMmC,UAAW,KAHZ,cAKRK,EAAaU,WAAY,SAAClD,EAAOC,GAC9BD,EAAMoC,MAAN,sBAAkBpC,EAAMoC,OAAxB,YAAkCnC,EAAOG,QAAQK,KAAKZ,WACtDG,EAAMkC,WAAY,EAClBlC,EAAMmC,UAAW,KARZ,cAURK,EAAaW,UAAW,SAACnD,EAAOC,GAC7BD,EAAMkC,WAAY,EAClBlC,EAAMmC,UAAW,KAZZ,KAuBjB,QC1BeiB,MAbf,WACE,IAAMC,EAAW7C,cAKjB,OAJA8C,qBAAU,WACRD,EAASb,OACR,CAACa,IAGF,qBAAKzE,UAAU,MAAf,SACE,cAACmD,EAAD,OCdC,SAASwB,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAEjD,KAAM+C,MAAW,QCAhD,IAUaI,EAAiBnB,YAC5B,qBAD4C,uCAE5C,WAAOe,GAAP,eAAAd,EAAA,sEACyBa,EAAWC,GADpC,cACQZ,EADR,yBAGSA,EAASnC,MAHlB,2CAF4C,uDASjCoD,EAAexE,YAAY,CACtCC,KAAM,UACNC,aArBmB,CACnBuE,MAAO,EACPC,OAAQ,QAqBRjE,SAAU,CACRkE,UAAW,SAAChE,GAKVA,EAAM8D,OAAS,GAEjBG,UAAW,SAACjE,GACVA,EAAM8D,OAAS,GAGjBI,kBAAmB,SAAClE,EAAOC,GACzBD,EAAM8D,OAAS7D,EAAOG,UAK1B4C,cAAe,SAACmB,GACdA,EACGC,QAAQR,EAAeX,SAAS,SAACjD,GAChCA,EAAM+D,OAAS,aAEhBK,QAAQR,EAAeV,WAAW,SAAClD,EAAOC,GACzCD,EAAM+D,OAAS,OACf/D,EAAM8D,OAAS7D,EAAOG,c,EAK6ByD,EAAaxD,QAgBzDwD,G,EAhBAG,U,EAAWC,U,EAAWC,kBAgBtBL,EAAf,SCnEaQ,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,EACTxC,cAAeyC,KCICC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUb,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJc,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.94261e55.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux'\n// import {\n//     nextPic,\n//     previousPic\n// } from './picCarouselSlice';\nimport './picCarousel.css';\n\n\nexport function PicCarousel(props) {\n    const [currentPic, setCurrentPic] = useState(0);\n    function nextPic(){\n        setCurrentPic(currentPic + 1);\n    }\n\n    function previousPic(){\n        setCurrentPic(currentPic - 1);\n    }\n\n    return(\n        <div className=\"PicCarousel\">\n            <div className=\"controls\">\n                {currentPic === 0 ? <button disabled>ðŸš«</button>: <button onClick={() => previousPic()}>ðŸ‘ˆ</button>}\n                {currentPic === props.pics.length - 1 ? <button disabled>ðŸš«</button> : <button onClick={() => nextPic()}>ðŸ‘‰</button>}\n            </div>\n            <img className=\"shown-img\" src={`https://i.redd.it/${props.pics[currentPic].media_id}.jpg`} alt=\"Carousel\" />\n        </div>\n    )\n}","import { createSlice } from '@reduxjs/toolkit';\n\n//Define the inital state of Post:\nconst initialState = {\n    title: '',\n    text: '',\n    gallery: [],\n    timestamp: '',\n    points: '',\n    children: ''\n}\n\nexport const postSlice = createSlice({\n    name:'post',\n    initialState,\n    reducers: {\n        setGallery: (state, action) => {\n            console.log(action.payload)\n            state.gallery = [action.payload]\n        }\n    }\n})\n\nexport const { setGallery } = postSlice.actions;\n\nexport default postSlice.reducer;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"./post.css\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport { PicCarousel } from \"../../utils/picCarousel/PicCarousel\";\nimport \"../../../node_modules/video-react/dist/video-react.css\";\nimport ReactHlsPlayer from \"react-hls-player\";\n\nimport { setGallery } from \"./postSlice\";\n\n//Function that we use to format the text posts.\nfunction htmlDecode(input) {\n    var doc = new DOMParser().parseFromString(input, \"text/html\");\n\n    return doc.documentElement.textContent;\n}\n\nexport function Post(props) {\n    const dispatch = useDispatch();\n\n    if (props.data.secure_media) {\n        console.log(props.data.secure_media.reddit_video.fallback_url);\n        return (\n            <div className=\"post post_video\">\n                <div className=\"info\">\n                    <div className=\"info-item points\">\n                        <ArrowUpwardIcon />\n                        <p>{props.data.score}</p>\n                    </div>\n                    <br />\n                    <div className=\"info-item children\">\n                        <ChatBubbleIcon />\n                        <p>{props.data.num_comments}</p>\n                    </div>\n                </div>\n                <div className=\"contents\">\n                    <h2>{props.data.title}</h2>\n                    <ReactHlsPlayer src={props.data.secure_media.reddit_video.hls_url} autoplay={false} controls={true} class=\"video-container\"/>\n                </div>\n            </div>\n        );\n    }\n\n    if (props.data.post_hint === \"image\") {\n        return (\n            <div className=\"post post_image\">\n                <div className=\"info\">\n                    <div className=\"info-item points\">\n                        <ArrowUpwardIcon />\n                        <p>{props.data.score}</p>\n                    </div>\n                    <br />\n                    <div className=\"info-item children\">\n                        <ChatBubbleIcon />\n                        <p>{props.data.num_comments}</p>\n                    </div>\n                </div>\n                <div className=\"contents\">\n                    <h2>{props.data.title}</h2>\n                    <img\n                        className=\"image\"\n                        alt=\"Post Content\"\n                        src={props.data.url}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    if (props.data.gallery_data) {\n        return (\n            <div className=\"post post_carousel\">\n                <div className=\"info\">\n                    <div className=\"info-item points\">\n                        <ArrowUpwardIcon />\n                        <p>{props.data.score}</p>\n                    </div>\n                    <br />\n                    <div className=\"info-item children\">\n                        <ChatBubbleIcon />\n                        <p>{props.data.num_comments}</p>\n                    </div>\n                </div>\n                <div className=\"contents\">\n                    <h2>{props.data.title}</h2>\n                    <PicCarousel\n                        className=\"carousel\"\n                        pics={props.data.gallery_data.items}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    if (props.data.selftext === \"\") {\n        return (\n            <div className=\"post\">\n                <div className=\"info\">\n                    <div className=\"info-item points\">\n                        <ArrowUpwardIcon />\n                        <p>{props.data.score}</p>\n                    </div>\n                    <br />\n                    <div className=\"info-item children\">\n                        <ChatBubbleIcon />\n                        <p>{props.data.num_comments}</p>\n                    </div>\n                </div>\n                <div className=\"contents\">\n                    <h2>{props.data.title}</h2>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"post\">\n            <div className=\"info\">\n                <div className=\"info-item points\">\n                    <ArrowUpwardIcon />\n                    <p>{props.data.score}</p>\n                </div>\n                <br />\n                <div className=\"info-item children\">\n                    <ChatBubbleIcon />\n                    <p>{props.data.num_comments}</p>\n                </div>\n            </div>\n            <div className=\"contents\">\n                <h4>{props.data.title}</h4>\n                <div\n                    className=\"selftext\"\n                    dangerouslySetInnerHTML={{\n                        __html: htmlDecode(props.data.selftext_html),\n                    }}\n                ></div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector, /*useDispatch*/ } from 'react-redux';\n\nimport { Post } from '../../features/post/Post';\nimport './postContainer.css'\n\nexport function PostContainer (props) {\n    // const dispatch = useDispatch();\n    const { isLoading, hasError, posts } = useSelector((state) => state.postContainer)\n\n    if(isLoading){\n        return(\n            <h3>Loading...</h3>\n        )\n    } else if(hasError){\n        return(\n            <h1>Error loading posts, please try again later :(</h1>\n        )\n    }\n\n    return (\n        <div className=\"PostContainer\">\n            {posts.map((post, i) => {\n                return <Post key={i} data={posts[i].data}/>\n            })}\n        </div>\n    )\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    posts:[],\n    isLoading: false,\n    hasError: false,\n};\n\nexport const getLocalData = createAsyncThunk(\n    'postContainer/getLocalData',\n    async () => {\n        const response = await fetch('fakedata.json');\n        const output = await response.json()\n        return output;\n    }\n)\n\nexport const postContainerSlice = createSlice({\n    name:'postContainer',\n    initialState,\n    reducers:{\n        \n    },\n    extraReducers: {\n        [getLocalData.pending]: (state, action) => {\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [getLocalData.fulfilled]: (state, action) => {\n            state.posts = [...state.posts, ...action.payload.data.children];\n            state.isLoading = false;\n            state.hasError = false;\n        },\n        [getLocalData.rejected]: (state, action) => {\n            state.isLoading = false;\n            state.hasError = true;\n        }\n    }\n});\n\nexport const selectPosts = (state) => state.postContainer.posts\n\nexport const selectLoading = (state) => {\n    return state.postContainer.loading;\n}\n\nexport default postContainerSlice.reducer;","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n// import { Counter } from './features/counter/Counter';\nimport './App.css';\nimport { PostContainer } from './containers/postContainer/PostContainer'\nimport { getLocalData } from './containers/postContainer/postContainerSlice';\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getLocalData());\n  }, [dispatch])\n\n  return (\n    <div className=\"App\">\n      <PostContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport postContainerReducer from '../containers/postContainer/postContainerSlice';\nimport postReducer from '../features/post/postSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    postContainer: postContainerReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}