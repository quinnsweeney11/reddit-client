{"version":3,"sources":["utils/picCarousel/PicCarousel.js","containers/postContainer/postContainerSlice.js","features/post/Post.js","containers/postContainer/PostContainer.js","features/filter/filterSlice.js","features/filter/Filter.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["PicCarousel","props","useState","currentPic","setCurrentPic","className","disabled","onClick","pics","length","src","media_id","alt","getLocalData","createAsyncThunk","a","fetch","response","json","output","getRedditData","url","postContainerSlice","createSlice","name","initialState","posts","isLoading","hasError","showPosts","reducers","toggleShowPosts","state","action","payload","extraReducers","pending","fulfilled","data","children","rejected","actions","htmlDecode","input","DOMParser","parseFromString","documentElement","textContent","Post","dispatch","useDispatch","newWarn","secure_media","reddit_video","score","num_comments","subreddit","author","title","hls_url","autoplay","controls","oembed","dangerouslySetInnerHTML","__html","html","post_hint","gallery_data","items","selftext","selftext_html","PostContainer","useSelector","postContainer","currentFilter","filter","type","color","height","width","map","post","i","filterSlice","switchFilter","Filter","console","log","useEffect","window","scrollTo","class","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","value","status","increment","decrement","incrementByAmount","builder","addCase","store","configureStore","reducer","counter","counterReducer","postContainerReducer","filterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91574cfb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './picCarousel.css';\n\n\nexport function PicCarousel(props) {\n    const [currentPic, setCurrentPic] = useState(0);\n    function nextPic(){\n        setCurrentPic(currentPic + 1);\n    }\n\n    function previousPic(){\n        setCurrentPic(currentPic - 1);\n    }\n\n    return(\n        <div className=\"PicCarousel\">\n            <div className=\"controls\">\n                {currentPic === 0 ? <button disabled>🚫</button>: <button onClick={() => previousPic()}>👈</button>}\n                {currentPic === props.pics.length - 1 ? <button disabled>🚫</button> : <button onClick={() => nextPic()}>👉</button>}\n            </div>\n            <img className=\"shown-img\" src={`https://i.redd.it/${props.pics[currentPic].media_id}.jpg`} alt=\"Carousel\" />\n        </div>\n    )\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    posts:[],\n    isLoading: false,\n    hasError: false,\n    showPosts: false,\n};\n\nexport const getLocalData = createAsyncThunk(\n    'postContainer/getLocalData',\n    async () => {\n        const response = await fetch('fakedata.json');\n        const output = await response.json()\n        return output;\n    }\n)\n\nexport const getRedditData = createAsyncThunk(\n    'postContainer/getRedditData',\n    async (url) => {\n        const response = await fetch(url);\n        const output = await response.json();\n        return output;\n    }\n)\n\nexport const postContainerSlice = createSlice({\n    name:'postContainer',\n    initialState,\n    reducers:{\n        toggleShowPosts: (state, action) => {\n            state.showPosts = action.payload\n        }\n    },\n    extraReducers: {\n        [getLocalData.pending]: (state, action) => {\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [getLocalData.fulfilled]: (state, action) => {\n            state.posts = [...state.posts, ...action.payload.data.children];\n            state.isLoading = false;\n            state.hasError = false;\n        },\n        [getLocalData.rejected]: (state, action) => {\n            state.isLoading = false;\n            state.hasError = true;\n        },\n        [getRedditData.pending]: (state) => {\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [getRedditData.fulfilled]: (state, action) => {\n            state.posts = [...action.payload.data.children];\n            state.isLoading = false;\n            state.hasError = false;\n        },\n        [getRedditData.rejected]: (state) => {\n            state.isLoading = false;\n            state.hasError = true;\n        }\n    }\n});\n\nexport const selectPosts = (state) => state.postContainer.posts\n\nexport const selectLoading = (state) => {\n    return state.postContainer.loading;\n}\n\nexport const { toggleShowPosts } = postContainerSlice.actions;\n\nexport default postContainerSlice.reducer;","import React from \"react\";\nimport \"./post.css\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubble\";\nimport { PicCarousel } from \"../../utils/picCarousel/PicCarousel\";\nimport \"../../../node_modules/video-react/dist/video-react.css\";\nimport ReactHlsPlayer from \"react-hls-player\";\nimport { toggleShowPosts } from '../../containers/postContainer/postContainerSlice'\nimport { useDispatch } from 'react-redux'\n\n//Function that we use to format the text posts.\nfunction htmlDecode(input) {\n    var doc = new DOMParser().parseFromString(input, \"text/html\");\n\n    return doc.documentElement.textContent;\n}\n\nexport function Post(props) {\n    const dispatch = useDispatch();\n    if(props.newWarn === true) {\n        return (\n            <div className=\"post post_newWarn\">\n                <div className=\"contents\">\n                    <h1 className=\"warning\">WARNING: You are browsing using the 'new' filter. These posts are very unmoderated, and can contain innapropriate content. Proceed at your own risk.</h1>\n                    <button onClick={() => dispatch(toggleShowPosts(true))}>I understand, let me in!</button>\n                </div>\n            </div>\n        )\n    }\n\n    if (props.data.secure_media && props.data.secure_media.reddit_video) {\n        return (\n            <div className=\"post post_video\">\n                <div className=\"info\">\n                    <div className=\"info-item points\">\n                        <ArrowUpwardIcon />\n                        <p>{props.data.score}</p>\n                    </div>\n                    <br />\n                    <div className=\"info-item children\">\n                        <ChatBubbleIcon />\n                        <p>{props.data.num_comments}</p>\n                    </div>\n                </div>\n                <div className=\"contents\">\n                    <div className=\"info-item metadata\">\n                        <p><span className=\"rslash\">r/</span>{props.data.subreddit}</p>\n                        <p><span className=\"uslash\">u/</span>{props.data.author}</p>\n                    </div>\n                    <h2 className=\"title-text\">{props.data.title}</h2>\n                    <ReactHlsPlayer src={props.data.secure_media.reddit_video.hls_url} autoplay={false} controls={true} className=\"video-container\"/>\n                </div>\n            </div>\n        );\n    } else if(props.data.secure_media && props.data.secure_media.oembed) {\n        return (\n            <div className=\"post post_gif\">\n                <div className=\"info\">\n                    <div className=\"info-item points\">\n                        <ArrowUpwardIcon />\n                        <p>{props.data.score}</p>\n                    </div>\n                    <br />\n                    <div className=\"info-item children\">\n                        <ChatBubbleIcon />\n                        <p>{props.data.num_comments}</p>\n                    </div>\n                </div>\n                <div className=\"contents\">\n                    <div className=\"info-item metadata\">\n                        <p><span className=\"rslash\">r/</span>{props.data.subreddit}</p>\n                        <p><span className=\"uslash\">u/</span>{props.data.author}</p>\n                    </div>\n                    <h2>{props.data.title}</h2>\n                    <div className=\"embedded_media\" dangerouslySetInnerHTML={{__html: htmlDecode(props.data.secure_media.oembed.html)}}>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    if (props.data.post_hint === \"image\") {\n        return (\n            <div className=\"post post_image\">\n                <div className=\"info\">\n                    <div className=\"info-item points\">\n                        <ArrowUpwardIcon />\n                        <p>{props.data.score}</p>\n                    </div>\n                    <br />\n                    <div className=\"info-item children\">\n                        <ChatBubbleIcon />\n                        <p>{props.data.num_comments}</p>\n                    </div>\n                </div>\n                <div className=\"contents\">\n                    <div className=\"info-item metadata\">\n                        <p><span className=\"rslash\">r/</span>{props.data.subreddit}</p>\n                        <p><span className=\"uslash\">u/</span>{props.data.author}</p>\n                    </div>\n                    <h2>{props.data.title}</h2>\n                    <img\n                        className=\"image\"\n                        alt=\"Post Content\"\n                        src={props.data.url}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    if (props.data.gallery_data) {\n        return (\n            <div className=\"post post_carousel\">\n                <div className=\"info\">\n                    <div className=\"info-item points\">\n                        <ArrowUpwardIcon />\n                        <p>{props.data.score}</p>\n                    </div>\n                    <br />\n                    <div className=\"info-item children\">\n                        <ChatBubbleIcon />\n                        <p>{props.data.num_comments}</p>\n                    </div>\n                </div>\n                <div className=\"contents\">\n                    <div className=\"info-item metadata\">\n                        <p><span className=\"rslash\">r/</span>{props.data.subreddit}</p>\n                        <p><span className=\"uslash\">u/</span>{props.data.author}</p>\n                    </div>\n                    <h2>{props.data.title}</h2>\n                    <PicCarousel\n                        className=\"carousel\"\n                        pics={props.data.gallery_data.items}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    if (props.data.selftext === \"\") {\n        return (\n            <div className=\"post\">\n                <div className=\"info\">\n                    <div className=\"info-item points\">\n                        <ArrowUpwardIcon />\n                        <p>{props.data.score}</p>\n                    </div>\n                    <br />\n                    <div className=\"info-item children\">\n                        <ChatBubbleIcon />\n                        <p>{props.data.num_comments}</p>\n                    </div>\n                </div>\n                <div className=\"contents\">\n                    <div className=\"info-item metadata\">\n                        <p><span className=\"rslash\">r/</span>{props.data.subreddit}</p>\n                        <p><span className=\"uslash\">u/</span>{props.data.author}</p>\n                    </div>\n                    <h2>{props.data.title}</h2>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"post\">\n            <div className=\"info\">\n                <div className=\"info-item points\">\n                    <ArrowUpwardIcon />\n                    <p>{props.data.score}</p>\n                </div>\n                <br />\n                <div className=\"info-item children\">\n                    <ChatBubbleIcon />\n                    <p>{props.data.num_comments}</p>\n                </div>\n            </div>\n            <div className=\"contents\">\n                <div className=\"info-item metadata\">\n                    <p><span className=\"rslash\">r/</span>{props.data.subreddit}</p>\n                    <p><span className=\"uslash\">u/</span>{props.data.author}</p>\n                </div>\n                <h4>{props.data.title}</h4>\n                <div\n                    className=\"selftext\"\n                    dangerouslySetInnerHTML={{\n                        __html: htmlDecode(props.data.selftext_html),\n                    }}\n                ></div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Post } from '../../features/post/Post';\nimport './postContainer.css'\n\nimport ReactLoading from 'react-loading';\n\nexport function PostContainer (props) {\n    // const dispatch = useDispatch();\n    const { isLoading, hasError, posts, showPosts } = useSelector((state) => state.postContainer)\n    const currentFilter = useSelector((state) => state.filter);\n\n    if(isLoading){\n        return(\n            <div className=\"nonpost-container\">\n                <ReactLoading className=\"loader\" type='bars' color='#519fcf' height={'15%'} width={'10%'} />\n            </div>\n        )\n    } else if(hasError){\n        return(\n            <div className=\"nonpost-container\">\n                <h1>Error loading posts, please try again later :(</h1>\n            </div>\n        )\n    }\n\n    if(currentFilter.currentFilter === 'new' && !showPosts){\n        return (\n            <div className=\"nonpost-container\">\n                <Post newWarn={true} />\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"PostContainer\">\n            {posts.map((post, i) => {\n                return <Post key={i} data={posts[i].data}/>\n            })}\n        </div>\n    )\n}","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    currentFilter: 'hot'\n}\n\nexport const filterSlice = createSlice({\n    name:'filter',\n    initialState,\n    reducers:{\n        switchFilter: (state, action) => {\n            state.currentFilter = action.payload.filter;\n        } \n    }\n})\n\nexport const selectFilter = (state) => state.filter.currentFilter;\n\nexport const { switchFilter } = filterSlice.actions;\n\nexport default filterSlice.reducer;","import React, {useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './filter.css';\nimport { switchFilter } from './filterSlice';\nimport { getRedditData, toggleShowPosts } from '../../containers/postContainer/postContainerSlice';\n\nexport function Filter(props) {\n    const dispatch = useDispatch();\n    const { currentFilter } = useSelector((state) => state.filter)\n    console.log(currentFilter)\n    useEffect(() => {\n        const url = `https://www.reddit.com/${currentFilter}.json`\n        dispatch(getRedditData(url))\n        window.scrollTo(0,0)\n    })\n    return(\n        <div className=\"filter\">\n            <div className='buttons'>\n                <button className={currentFilter === 'hot' ? 'active' : 'inactive'} onClick={() => dispatch(switchFilter({filter:'hot'}))}>Hot</button>\n                <button className={currentFilter === 'new' ? 'active' : 'inactive'} onClick={() => dispatch(switchFilter({filter:'new'}))}>New</button>\n                <button className={currentFilter === 'best' ? 'active' : 'inactive'} onClick={() => dispatch(switchFilter({filter: 'best'}))}>Best</button>\n            </div>\n            <div className='text'>\n                <h3>This project is still a work in progress, here are some of the things to be added in the future:</h3>\n                <ul>\n                    <li>Loading more posts when a user's scroll reaches the bottom of the page</li>\n                    <li>Search bar to filter by subreddit</li>\n                    <li>Interface to browse comments on posts</li>\n                    <li>Improved mobile experience</li>\n                </ul>\n                <p class=\"myNote\">Made with ❤️ by Quinn Sweeney</p>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport { PostContainer } from './containers/postContainer/PostContainer';\nimport { Filter } from './features/filter/Filter';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <PostContainer />\n      <Filter />\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport postContainerReducer from '../containers/postContainer/postContainerSlice';\nimport filterReducer from '../features/filter/filterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    postContainer: postContainerReducer,\n    filter: filterReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}